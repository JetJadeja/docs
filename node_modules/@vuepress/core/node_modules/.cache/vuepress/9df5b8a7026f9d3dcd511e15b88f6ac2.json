{"remainingRequest":"/Users/jaibhavnani/Desktop/Git/rari-docs/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/jaibhavnani/Desktop/Git/rari-docs/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/jaibhavnani/Desktop/Git/rari-docs/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/jaibhavnani/Desktop/Git/rari-docs/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/Users/jaibhavnani/Desktop/Git/rari-docs/docs/config/README.md?vue&type=template&id=c34cab30&","dependencies":[{"path":"/Users/jaibhavnani/Desktop/Git/rari-docs/docs/config/README.md","mtime":1619155064931},{"path":"/Users/jaibhavnani/Desktop/Git/rari-docs/node_modules/cache-loader/dist/cjs.js","mtime":1619077300192},{"path":"/Users/jaibhavnani/Desktop/Git/rari-docs/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1619077362344},{"path":"/Users/jaibhavnani/Desktop/Git/rari-docs/node_modules/cache-loader/dist/cjs.js","mtime":1619077300192},{"path":"/Users/jaibhavnani/Desktop/Git/rari-docs/node_modules/vue-loader/lib/index.js","mtime":1619077362344},{"path":"/Users/jaibhavnani/Desktop/Git/rari-docs/node_modules/@vuepress/markdown-loader/index.js","mtime":1619077304147}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:var render = function() {
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _c(
    "ContentSlotsDistributor",
    { attrs: { "slot-key": _vm.$parent.slotKey } },
    [
      _c("h1", { attrs: { id: "stable-pool" } }, [
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#stable-pool" } },
          [_vm._v("#")]
        ),
        _vm._v(" Stable Pool")
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("Welcome to "),
        _c("code", [_vm._v("rari-stable-pool-contracts")]),
        _vm._v(
          ", the central repository for the Solidity source code behind the Rari Stable Pool's Ethereum-based smart contracts (with automated tests and documentation)."
        )
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "generating-yield" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#generating-yield" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" Generating Yield")
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Currently, the Rari Stable Pool generates yield by depositing a combination of:"
        )
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("DAI and USDC to the lending protocol "),
          _c(
            "a",
            {
              attrs: {
                href: "https://dydx.exchange/",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_vm._v("dYdX"), _c("OutboundLink")],
            1
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("DAI, USDC, and USDT to the lending protocol "),
          _c(
            "a",
            {
              attrs: {
                href: "https://compound.finance/",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_vm._v("Compound"), _c("OutboundLink")],
            1
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "DAI, USDC, USDT, TUSD, BUSD, and sUSD to the lending protocol "
          ),
          _c(
            "a",
            {
              attrs: {
                href: "https://aave.com/",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_vm._v("Aave"), _c("OutboundLink")],
            1
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("mUSD to the savings protocol from "),
          _c(
            "a",
            {
              attrs: {
                href: "https://mstable.org/",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_vm._v("mStable"), _c("OutboundLink")],
            1
          )
        ])
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Rari optimizes yield not only by allocating assets to the pools with the highest interest rates, but also by exchanging assets to the stablecoins with the highest interest rates via a combination of:"
        )
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href: "https://0x.org/",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_vm._v("0x"), _c("OutboundLink")],
            1
          ),
          _vm._v(" exchange")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Swapping via mUSD from "),
          _c(
            "a",
            {
              attrs: {
                href: "https://mstable.org/",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_vm._v("mStable"), _c("OutboundLink")],
            1
          )
        ])
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "In the near future, we will be generating yield from more currencies across more lending protocols, among other strategies."
        )
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "rspt-rari-stable-pool-token" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#rspt-rari-stable-pool-token" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" RSPT (Rari Stable Pool Token)")
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Each user's share of the Rari Stable Pool is represented by their RSPT (Rari Stable Pool Token) balance. When you deposit funds to the Stable Pool, an equivalent amount of RSPT is minted to your account. When you withdraw funds from the Stable Pool, the equivalent amount of RSPT is burned from your account. As soon as you deposit, you start earning yield. Essentially, Rari Stable Pool holdings and yield are split up across RSPT holders proportionally to their balances."
        )
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "deposits" } }, [
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#deposits" } },
          [_vm._v("#")]
        ),
        _vm._v(" Deposits")
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Only certain stablecoins are accepted for direct deposits (direct meaning without exchange to an accepted currency). To deposit another currency, you must exchange your funds before depositing. Fortunately, Rari can exchange and deposit your funds in the same transaction via "
        ),
        _c(
          "a",
          {
            attrs: {
              href: "https://0x.org/",
              target: "_blank",
              rel: "noopener noreferrer"
            }
          },
          [_vm._v("0x"), _c("OutboundLink")],
          1
        ),
        _vm._v(" and/or "),
        _c(
          "a",
          {
            attrs: {
              href: "https://mstable.org/",
              target: "_blank",
              rel: "noopener noreferrer"
            }
          },
          [_vm._v("mStable"), _c("OutboundLink")],
          1
        ),
        _vm._v(
          " (please be aware that exchanges via 0x are subject to slippage due to price spread as well as an ETH protocol fee, and exchanges via mStable are subject to a small denominational percentage fee, but can avoid slippage and even get you a bonus)."
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("See "),
        _c(
          "a",
          {
            attrs: {
              href:
                "https://github.com/Rari-Capital/rari-stable-pool-contracts/blob/master/USAGE.md",
              target: "_blank",
              rel: "noopener noreferrer"
            }
          },
          [_c("code", [_vm._v("USAGE.md")]), _c("OutboundLink")],
          1
        ),
        _vm._v(
          " for more information on how to deposit via the smart contracts and "
        ),
        _c(
          "a",
          {
            attrs: {
              href:
                "https://github.com/Rari-Capital/rari-stable-pool-contracts/blob/master/API.md",
              target: "_blank",
              rel: "noopener noreferrer"
            }
          },
          [_c("code", [_vm._v("API.md")]), _c("OutboundLink")],
          1
        ),
        _vm._v(
          " for a detailed reference on the smart contract methods involved. See the Rari SDK for easy implementation and the web client for easy usage."
        )
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "withdrawals" } }, [
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#withdrawals" } },
          [_vm._v("#")]
        ),
        _vm._v(" Withdrawals")
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Only the stablecoins currently held by the Rari Stable Pool are available for direct withdrawals. To withdraw another currency, you must exchange your funds after withdrawing. Fortunately, Rari can withdraw and exchange your funds in the same transaction via "
        ),
        _c(
          "a",
          {
            attrs: {
              href: "https://0x.org/",
              target: "_blank",
              rel: "noopener noreferrer"
            }
          },
          [_vm._v("0x"), _c("OutboundLink")],
          1
        ),
        _vm._v(" and/or "),
        _c(
          "a",
          {
            attrs: {
              href: "https://mstable.org/",
              target: "_blank",
              rel: "noopener noreferrer"
            }
          },
          [_vm._v("mStable"), _c("OutboundLink")],
          1
        ),
        _vm._v(
          " (please be aware that exchanges via 0x are subject to slippage due to price spread as well as an ETH protocol fee, and exchanges via mStable are subject to a small denominational percentage fee, but can avoid slippage and even get you a bonus)."
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("See "),
        _c(
          "a",
          {
            attrs: {
              href:
                "https://github.com/Rari-Capital/rari-stable-pool-contracts/blob/master/USAGE.md",
              target: "_blank",
              rel: "noopener noreferrer"
            }
          },
          [_c("code", [_vm._v("USAGE.md")]), _c("OutboundLink")],
          1
        ),
        _vm._v(
          " for more information on how to withdraw via the smart contracts and "
        ),
        _c(
          "a",
          {
            attrs: {
              href:
                "https://github.com/Rari-Capital/rari-stable-pool-contracts/blob/master/API.md",
              target: "_blank",
              rel: "noopener noreferrer"
            }
          },
          [_c("code", [_vm._v("API.md")]), _c("OutboundLink")],
          1
        ),
        _vm._v(
          " for a detailed reference on the smart contract methods involved. See the Rari SDK for easy implementation and the web client for easy usage."
        )
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "structure" } }, [
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#structure" } },
          [_vm._v("#")]
        ),
        _vm._v(" Structure")
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("The Rari Stable Pool is composed of 5 user-facing "),
        _c("strong", [_vm._v("smart contracts")]),
        _vm._v(" in total (see "),
        _c(
          "a",
          {
            attrs: {
              href:
                "https://github.com/Rari-Capital/rari-stable-pool-contracts/blob/master/DEPLOYED.md",
              target: "_blank",
              rel: "noopener noreferrer"
            }
          },
          [_c("code", [_vm._v("DEPLOYED.md")]), _c("OutboundLink")],
          1
        ),
        _vm._v(" for deployed addresses):")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _c("code", [_vm._v("RariFundManager")]),
          _vm._v(
            " is the Rari Stable Pool's main contract, handling deposits, withdrawals, USD balances, interest, fees, etc."
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("RariFundController")]),
          _vm._v(
            " holds supplied funds and is used by the rebalancer to deposit and withdraw from pools and make exchanges."
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("RariFundToken")]),
          _vm._v(
            " is the contract behind the Rari Stable Pool Token (RSPT), an ERC20 token used to internally account for the ownership of funds supplied to the Rari Stable Pool."
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("RariFundPriceConsumer")]),
          _vm._v(
            " retrieves stablecoin prices from Chainlink's public price feeds (used by "
          ),
          _c("code", [_vm._v("RariFundManager")]),
          _vm._v(" and "),
          _c("code", [_vm._v("RariFundController")]),
          _vm._v(").")
        ]),
        _vm._v(" "),
        _c("li", [
          _c("code", [_vm._v("RariFundProxy")]),
          _vm._v(" includes wrapper functions built on top of "),
          _c("code", [_vm._v("RariFundManager")]),
          _vm._v(
            ": exchange and deposit, withdraw and exchange, and deposit without paying gas via the Gas Station Network (GSN)."
          )
        ])
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("A centralized (but soon to be decentralized) "),
        _c("strong", [_vm._v("rebalancer")]),
        _vm._v(
          " controls which pools hold which currencies at any given time but only has permission to move funds between pools and exchange currencies, not withdraw funds elsewhere."
        )
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "security" } }, [
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#security" } },
          [_vm._v("#")]
        ),
        _vm._v(" Security")
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Rari's Ethereum-based smart contracts are written in Solidity and audited by "
        ),
        _c(
          "a",
          {
            attrs: {
              href: "https://quantstamp.com/",
              target: "_blank",
              rel: "noopener noreferrer"
            }
          },
          [_vm._v("Quantstamp"), _c("OutboundLink")],
          1
        ),
        _vm._v(
          " (as well as various other partners) for security. Rari does not have control over your funds: instead, the Ethereum blockchain executes all secure code across its entire decentralized network (making it very difficult and extremely costly to rewrite history), and your funds are only withdrawable by you."
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "The rebalancer only has permission to move funds between pools and exchange currencies, not withdraw funds elsewhere. Losses due to exchange slippage in a 24-hour period are limited proportionally to the total supply for security since 0x orders can come from anywhere. However, the rebalancer can approve any amount of funds to the pools and exchanges integrated."
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Please note that at the moment, smart contract upgrades are approved via a multisig federation controlled by various trusted parties. Each of the upgrades need to be voted on by governance at: vote.rari.capital for them to go live."
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("Please note that using our web client online at "),
        _c(
          "a",
          {
            attrs: {
              href: "https://app.rari.capital/",
              target: "_blank",
              rel: "noopener noreferrer"
            }
          },
          [_vm._v("app.rari.capital"), _c("OutboundLink")],
          1
        ),
        _vm._v(
          " is not nearly as trustworthy as downloading, verifying, and using it offline. Lastly, the rebalancer can only rebalance funds to different pools and currencies (with limits on slippage)."
        )
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "risk" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#risk" } }, [
          _vm._v("#")
        ]),
        _vm._v(" Risk")
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("We have covered security above, but see "),
        _c(
          "a",
          {
            attrs: {
              href: "https://rari.capital/risks.html",
              target: "_blank",
              rel: "noopener noreferrer"
            }
          },
          [_vm._v("our website"), _c("OutboundLink")],
          1
        ),
        _vm._v(
          " for more information on the risks associated with supplying funds to Rari."
        )
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "fees" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#fees" } }, [
          _vm._v("#")
        ]),
        _vm._v(" Fees")
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("See "),
        _c(
          "a",
          {
            attrs: {
              href:
                "https://www.notion.so/Fees-e4689d7b800f485098548dd9e9d0a69f",
              target: "_blank",
              rel: "noopener noreferrer"
            }
          },
          [_vm._v("this Notion article"), _c("OutboundLink")],
          1
        ),
        _vm._v(" for more information about fees and where they go.")
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "comp" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#comp" } }, [
          _vm._v("#")
        ]),
        _vm._v(" COMP")
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("All "),
        _c(
          "a",
          {
            attrs: {
              href: "https://compound.finance/governance/comp",
              target: "_blank",
              rel: "noopener noreferrer"
            }
          },
          [_vm._v("COMP (Compound's governance token)"), _c("OutboundLink")],
          1
        ),
        _vm._v(
          " earned by the fund is liquidated into additional interest for RSPT holders approximately every 3 days."
        )
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "how-it-works" } }, [
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#how-it-works" } },
          [_vm._v("#")]
        ),
        _vm._v(" How It Works")
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "The Rari Stable Pool is a decentralized and fully-audited stablecoin lending aggregator optimized for yield based on the Ethereum blockchain. A high-level overview of how the Rari Stable Pool works is available in "
        ),
        _c(
          "a",
          {
            attrs: {
              href:
                "https://github.com/Rari-Capital/rari-stable-pool-contracts/blob/master/CONCEPT.md",
              target: "_blank",
              rel: "noopener noreferrer"
            }
          },
          [_c("code", [_vm._v("CONCEPT.md")]), _c("OutboundLink")],
          1
        ),
        _vm._v(". This information is also "),
        _c(
          "a",
          {
            attrs: {
              href: "https://rari.capital/current.html",
              target: "_blank",
              rel: "noopener noreferrer"
            }
          },
          [_vm._v("available online"), _c("OutboundLink")],
          1
        ),
        _vm._v(". Find out more about Rari Capital at "),
        _c(
          "a",
          {
            attrs: {
              href: "https://rari.capital/",
              target: "_blank",
              rel: "noopener noreferrer"
            }
          },
          [_vm._v("rari.capital"), _c("OutboundLink")],
          1
        ),
        _vm._v(".")
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "contract-usage" } }, [
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#contract-usage" } },
          [_vm._v("#")]
        ),
        _vm._v(" Contract Usage")
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "The following document contains instructions on common usage of the Rari Stable Pool smart contracts' APIs."
        )
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("See "),
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/Rari-Capital/rari-stable-pool-contracts/blob/master/API.md",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("API.md")]), _c("OutboundLink")],
            1
          ),
          _vm._v(" for a more detailed API reference on "),
          _c("code", [_vm._v("RariFundController")]),
          _vm._v(", "),
          _c("code", [_vm._v("RariFundManager")]),
          _vm._v(", "),
          _c("code", [_vm._v("RariFundToken")]),
          _vm._v(", "),
          _c("code", [_vm._v("RariFundPriceConsumer")]),
          _vm._v(", and "),
          _c("code", [_vm._v("RariFundProxy")]),
          _vm._v(".")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("See "),
          _c(
            "a",
            {
              attrs: {
                href: "https://eips.ethereum.org/EIPS/eip-20",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_vm._v("EIP-20: ERC-20 Token Standard"), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " for reference on all common functions of ERC20 tokens like RSPT."
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Smart contract ABIs are available in the "),
          _c("code", [_vm._v("abi")]),
          _vm._v(" properties of the JSON files in the "),
          _c("code", [_vm._v("build")]),
          _vm._v(" folder.")
        ])
      ]),
      _vm._v(" "),
      _c("p", [
        _c("em", [
          _vm._v(
            "If you're using JavaScript, don't waste your time directly integrating our smart contracts: the "
          ),
          _c(
            "a",
            {
              attrs: {
                href: "https://github.com/Rari-Capital/rari-sdk",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_vm._v("Rari JavaScript SDK"), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " makes programmatic deposits and withdrawals as easy as just one line of code!"
          )
        ])
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "stable-pool-apy" } }, [
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#stable-pool-apy" } },
          [_vm._v("#")]
        ),
        _vm._v(" Stable Pool APY")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Get current raw APY (before fees):\n"),
          _c("ol", [
            _c("li", [
              _vm._v(
                "Get raw currency/subpool allocations (including unclaimed fees on interest): "
              ),
              _c("code", [
                _vm._v(
                  "(string[], uint256[], RariFundController.LiquidityPool[][], uint256[][], uint256[]) RariFundProxy.getRawFundBalancesAndPrices()"
                )
              ]),
              _vm._v(
                " returns an array of currency codes, an array of corresponding fund controller contract balances for each currency code, an array of arrays of pool indexes for each currency code, an array of arrays of corresponding balances at each pool index for each currency code, and an array of prices in USD (scaled by 1e18) for each currency code."
              )
            ]),
            _vm._v(" "),
            _c("li", [
              _vm._v(
                "Multiply the APY of each pool of each currency by its fund controller balance (converted to USD)."
              )
            ]),
            _vm._v(" "),
            _c("li", [
              _vm._v(
                "Divide the sum of these products by the sum of all fund controller contract balances and pool balances of each currency (converted to USD) to get the current Stable Pool APY."
              )
            ])
          ])
        ]),
        _vm._v(" "),
        _c("li", [
          _c("strong", [_vm._v("Get current APY (after fees):")]),
          _vm._v(" subtract the product of the current raw APY and "),
          _c("code", [_vm._v("uint256 RariFundManager.getInterestFeeRate()")]),
          _vm._v(" divided by 1e18 from the current raw Stable Pool APY.")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Get APY over time range (after fees):\n"),
          _c("ol", [
            _c("li", [
              _vm._v(
                "Get RSPT exchange rates at start and end of time range: divide "
              ),
              _c("code", [_vm._v("RariFundManager.getFundBalance()")]),
              _vm._v(" by "),
              _c("code", [_vm._v("RariFundToken.totalSupply()")]),
              _vm._v(
                " to get the exchange rate of RSPT in USD (scaled by 1e18)."
              )
            ]),
            _vm._v(" "),
            _c("li", [
              _vm._v(
                "Divide the ending exchange rate by the starting exchange rate, raise this quotient to the power of 1 year divided by the length of the time range, and subtract one to get the Stable Pool APY over this time range."
              )
            ])
          ])
        ])
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "my-balance-and-interest" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#my-balance-and-interest" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" My Balance and Interest")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _c("strong", [_vm._v("Get my USD balance supplied:")]),
          _vm._v(" "),
          _c("code", [
            _vm._v("uint256 RariFundManager.balanceOf(address account)")
          ]),
          _vm._v(
            " returns the total balance in USD (scaled by 1e18) supplied to the Rari Stable Pool by "
          ),
          _c("code", [_vm._v("account")]),
          _vm._v(".")
        ]),
        _vm._v(" "),
        _c("li", [
          _c("strong", [_vm._v("Get my interest accrued:")]),
          _vm._v(
            " Subtract total deposits and transfers in (in USD) and add total withdrawals and transfers out (in USD) from "
          ),
          _c("code", [
            _vm._v("uint256 RariFundManager.balanceOf(address account)")
          ]),
          _vm._v(".")
        ])
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "deposit" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#deposit" } }, [
          _vm._v("#")
        ]),
        _vm._v(" Deposit")
      ]),
      _vm._v(" "),
      _c("ol", [
        _c("li", [
          _c("p", [
            _vm._v(
              "User chooses to deposit one of our directly supported tokens (DAI, USDC, USDT, TUSD, BUSD, and sUSD), ETH, or one of the tokens listed by the 0x swap tokens API (see "
            ),
            _c(
              "a",
              {
                attrs: {
                  href: "https://0x.org/docs/api#get-swapv0tokens",
                  target: "_blank",
                  rel: "noopener noreferrer"
                }
              },
              [_vm._v("documentation"), _c("OutboundLink")],
              1
            ),
            _vm._v(" and "),
            _c(
              "a",
              {
                attrs: {
                  href: "https://api.0x.org/swap/v0/tokens",
                  target: "_blank",
                  rel: "noopener noreferrer"
                }
              },
              [_vm._v("endpoint"), _c("OutboundLink")],
              1
            ),
            _vm._v(
              ") in an amount no greater than the balance of their Ethereum account."
            )
          ])
        ]),
        _vm._v(" "),
        _c("li", [
          _c("p", [
            _vm._v("User calls "),
            _c("code", [
              _vm._v("string[] RariFundManager.getAcceptedCurrencies()")
            ]),
            _vm._v(
              " to get an array of currency codes currently accepted for direct deposit to the Stable Pool."
            )
          ]),
          _vm._v(" "),
          _c("ul", [
            _c("li", [
              _c("p", [_vm._v("If desired deposit currency is accepted:")]),
              _vm._v(" "),
              _c("ul", [
                _c("li", [
                  _c("p", [
                    _vm._v(
                      "Generally, user simply approves tokens and deposits them:"
                    )
                  ]),
                  _vm._v(" "),
                  _c("ol", [
                    _c("li", [
                      _vm._v("User approves tokens to "),
                      _c("code", [_vm._v("RariFundManager")]),
                      _vm._v(" by calling "),
                      _c("code", [
                        _vm._v("approve(address spender, uint256 amount)")
                      ]),
                      _vm._v(
                        " on the ERC20 contract of the desired input token where "
                      ),
                      _c("code", [_vm._v("spender")]),
                      _vm._v(" is "),
                      _c("code", [_vm._v("RariFundManager")]),
                      _vm._v(" (to approve unlimited funds, set "),
                      _c("code", [_vm._v("amount")]),
                      _vm._v(" to "),
                      _c("code", [_vm._v("uint256(-1)")]),
                      _vm._v(").")
                    ]),
                    _vm._v(" "),
                    _c("li", [
                      _vm._v("Deposit with "),
                      _c("code", [
                        _vm._v(
                          "bool RariFundManager.deposit(string currencyCode, uint256 amount)"
                        )
                      ])
                    ])
                  ])
                ]),
                _vm._v(" "),
                _c("li", [
                  _c("p", [
                    _vm._v(
                      "To avoid paying gas, if the user's Ethereum account has no past deposit, the deposit amount is >= 250 USD, and the ETH balance returned by"
                    )
                  ]),
                  _vm._v(" "),
                  _c("div", { staticClass: "language- extra-class" }, [
                    _c(
                      "pre",
                      { pre: true, attrs: { class: "language-text" } },
                      [
                        _c("code", [
                          _vm._v(
                            "RelayHub(0xd216153c06e857cd7f72665e0af1d7d82172f494).balanceOf(0xb6b79d857858004bf475e4a57d4a446da4884866)\n"
                          )
                        ])
                      ]
                    )
                  ]),
                  _c("p", [
                    _vm._v(
                      "is enough to cover the necessary gas, the user can submit their transaction via the Gas Station Network (GSN):"
                    )
                  ]),
                  _vm._v(" "),
                  _c("ol", [
                    _c("li", [
                      _c("p", [
                        _vm._v("User approves tokens to "),
                        _c("code", [_vm._v("RariFundProxy")]),
                        _vm._v(" by calling "),
                        _c("code", [
                          _vm._v("approve(address spender, uint256 amount)")
                        ]),
                        _vm._v(
                          " on the ERC20 contract of the desired input token where "
                        ),
                        _c("code", [_vm._v("spender")]),
                        _vm._v(" is "),
                        _c("code", [_vm._v("RariFundProxy")]),
                        _vm._v(" (to approve unlimited funds, set "),
                        _c("code", [_vm._v("amount")]),
                        _vm._v(" to "),
                        _c("code", [_vm._v("uint256(-1)")]),
                        _vm._v(").")
                      ])
                    ]),
                    _vm._v(" "),
                    _c("li", [
                      _c("p", [
                        _vm._v(
                          "To get the necessary approval data (a signature from our trusted signer allowing the user to use our ETH for gas), POST the JSON body"
                        )
                      ]),
                      _vm._v(" "),
                      _c("div", { staticClass: "language- extra-class" }, [
                        _c(
                          "pre",
                          { pre: true, attrs: { class: "language-text" } },
                          [
                            _c("code", [
                              _vm._v(
                                "{ from, to, encodedFunctionCall, txFee, gasPrice, gas, nonce, relayerAddress, relayHubAddress }\n"
                              )
                            ])
                          ]
                        )
                      ]),
                      _c("p", [_vm._v("to")]),
                      _vm._v(" "),
                      _c("div", { staticClass: "language- extra-class" }, [
                        _c(
                          "pre",
                          { pre: true, attrs: { class: "language-text" } },
                          [
                            _c("code", [
                              _vm._v("https://app.rari.capital/checkSig.php\n")
                            ])
                          ]
                        )
                      ]),
                      _c("ul", [
                        _c("li", [
                          _vm._v("Note that "),
                          _c("code", [_vm._v("checkSig.php")]),
                          _vm._v(
                            " may go offline at some point in the future, in which case the user should deposit normally as described above."
                          )
                        ])
                      ])
                    ]),
                    _vm._v(" "),
                    _c("li", [
                      _c("p", [
                        _vm._v("User calls "),
                        _c("code", [
                          _vm._v(
                            "bool RariFundProxy.deposit(string currencyCode, uint256 amount)"
                          )
                        ]),
                        _vm._v(" via the Gas Station Network (GSN).")
                      ])
                    ])
                  ])
                ])
              ])
            ]),
            _vm._v(" "),
            _c("li", [
              _c("p", [
                _vm._v(
                  "If desired deposit currency is not accepted, get exchange data from mStable (preferably) and/or 0x:"
                )
              ]),
              _vm._v(" "),
              _c("ul", [
                _c("li", [
                  _c("p", [
                    _vm._v(
                      "If desired deposit currency is DAI, USDC, USDT, TUSD, or mUSD, until the user fulfills their entire deposit, exchange to any depositable currency among DAI, USDC, USDT, TUSD, or mUSD via mStable and deposit:"
                    )
                  ]),
                  _vm._v(" "),
                  _c("ol", [
                    _c("li", [
                      _vm._v("Get exchange data from mStable:\n"),
                      _c("ul", [
                        _c("li", [
                          _vm._v(
                            "If desired deposit currency is DAI, USDC, USDT, or TUSD, check "
                          ),
                          _c("code", [
                            _vm._v(
                              "(bool, string, uint256, uint256) MassetValidationHelper(0xabcc93c3be238884cc3309c19afd128fafc16911).getMaxSwap(0xe2f2a5c287993345a840db3b0845fbc70f5935a5, address _input, address _output)"
                            )
                          ]),
                          _vm._v(". If the first returned value is "),
                          _c("code", [_vm._v("true")]),
                          _vm._v(
                            ", the user can exchange a maximum input amount of the third returned value."
                          )
                        ]),
                        _vm._v(" "),
                        _c("li", [
                          _vm._v("If desired deposit currency is mUSD, check "),
                          _c("code", [
                            _vm._v(
                              "(bool, string, uint256 output, uint256 bassetQuantityArg) MassetValidationHelper(0xabcc93c3be238884cc3309c19afd128fafc16911).getRedeemValidity(0xabcc93c3be238884cc3309c19afd128fafc16911, uint256 _mAssetQuantity, address _outputBasset)"
                            )
                          ]),
                          _vm._v(". If the first returned value is "),
                          _c("code", [_vm._v("true")]),
                          _vm._v(
                            ", the user can exchange a maximum input amount of "
                          ),
                          _c("code", [_vm._v("bassetQuantityArg")]),
                          _vm._v(" (the fourth returned value).")
                        ])
                      ])
                    ]),
                    _vm._v(" "),
                    _c("li", [
                      _vm._v("User calls "),
                      _c("code", [
                        _vm._v(
                          "bool RariFundProxy.exchangeAndDeposit(string inputCurrencyCode, uint256 inputAmount, string outputCurrencyCode)"
                        )
                      ]),
                      _vm._v(" to exchange and deposit.")
                    ])
                  ])
                ]),
                _vm._v(" "),
                _c("li", [
                  _c("p", [
                    _vm._v(
                      "If exchange via mStable is not possible (or if the user wants to exchange the rest of their deposit via 0x if mStable cannot exchange it all), retrieve order data from 0x:"
                    )
                  ]),
                  _vm._v(" "),
                  _c("ol", [
                    _c("li", [
                      _c("p", [
                        _vm._v(
                          "User retrieves data from 0x swap quote API (see "
                        ),
                        _c(
                          "a",
                          {
                            attrs: {
                              href: "https://0x.org/docs/api#get-swapv0quote",
                              target: "_blank",
                              rel: "noopener noreferrer"
                            }
                          },
                          [_vm._v("documentation"), _c("OutboundLink")],
                          1
                        ),
                        _vm._v(" and "),
                        _c(
                          "a",
                          {
                            attrs: {
                              href:
                                "https://api.0x.org/swap/v0/quote?sellToken=DAI&buyToken=USDC&sellAmount=1000000000000000000",
                              target: "_blank",
                              rel: "noopener noreferrer"
                            }
                          },
                          [_vm._v("endpoint"), _c("OutboundLink")],
                          1
                        ),
                        _vm._v(") where:")
                      ]),
                      _vm._v(" "),
                      _c("ul", [
                        _c("li", [
                          _c("code", [_vm._v("sellToken")]),
                          _vm._v(" is their input currency")
                        ]),
                        _vm._v(" "),
                        _c("li", [
                          _c("code", [_vm._v("buyToken")]),
                          _vm._v(
                            " is a directly depositable currency to which the desired deposit currency will be exchanged"
                          )
                        ]),
                        _vm._v(" "),
                        _c("li", [
                          _c("code", [_vm._v("sellAmount")]),
                          _vm._v(" is the input amount to be sent by the user")
                        ])
                      ])
                    ]),
                    _vm._v(" "),
                    _c("li", [
                      _c("p", [
                        _vm._v("User approves tokens to "),
                        _c("code", [_vm._v("RariFundProxy")]),
                        _vm._v(" by calling "),
                        _c("code", [
                          _vm._v("approve(address spender, uint256 amount)")
                        ]),
                        _vm._v(
                          " on the ERC20 contract of the desired input token where "
                        ),
                        _c("code", [_vm._v("spender")]),
                        _vm._v(" is "),
                        _c("code", [_vm._v("RariFundProxy")]),
                        _vm._v(" (to approve unlimited funds, set "),
                        _c("code", [_vm._v("amount")]),
                        _vm._v(" to "),
                        _c("code", [_vm._v("uint256(-1)")]),
                        _vm._v(").")
                      ])
                    ]),
                    _vm._v(" "),
                    _c("li", [
                      _c("p", [_vm._v("User calls")]),
                      _vm._v(" "),
                      _c("div", { staticClass: "language- extra-class" }, [
                        _c(
                          "pre",
                          { pre: true, attrs: { class: "language-text" } },
                          [
                            _c("code", [
                              _vm._v(
                                "bool RariFundProxy.exchangeAndDeposit(address inputErc20Contract, uint256 inputAmount, string outputCurrencyCode, LibOrder.Order[] orders, bytes[] signatures, uint256 takerAssetFillAmount)\n"
                              )
                            ])
                          ]
                        )
                      ]),
                      _c("p", [_vm._v("where:")]),
                      _vm._v(" "),
                      _c("ul", [
                        _c("li", [
                          _c("code", [_vm._v("orders")]),
                          _vm._v(" is the orders array returned by the 0x API")
                        ]),
                        _vm._v(" "),
                        _c("li", [
                          _c("code", [_vm._v("signatures")]),
                          _vm._v(
                            " in an array of signatures from the orders array returned by the 0x API"
                          )
                        ]),
                        _vm._v(" "),
                        _c("li", [
                          _c("code", [_vm._v("takerAssetFillAmount")]),
                          _vm._v(" is the input amount sent by the user")
                        ])
                      ])
                    ])
                  ])
                ])
              ])
            ])
          ])
        ])
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "withdraw" } }, [
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#withdraw" } },
          [_vm._v("#")]
        ),
        _vm._v(" Withdraw")
      ]),
      _vm._v(" "),
      _c("ol", [
        _c("li", [
          _vm._v(
            "User ensures that their account possesses enough USD (represented internally by RSPT) to make their withdrawal."
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("User calls "),
          _c("code", [
            _vm._v(
              "uint256 RariFundManager.getRawFundBalance(string currencyCode)"
            )
          ]),
          _vm._v(
            " to get the raw total balance (currently held by the Stable Pool and available for direct withdrawal) of the desired withdrawal currency.\n"
          ),
          _c("ul", [
            _c("li", [
              _vm._v(
                "If the returned balance >= withdrawal amount, user calls "
              ),
              _c("code", [
                _vm._v(
                  "bool RariFundManager.withdraw(string currencyCode, uint256 amount)"
                )
              ])
            ]),
            _vm._v(" "),
            _c("li", [
              _vm._v("If returned balance < withdrawal amount:\n"),
              _c("ol", [
                _c("li", [
                  _vm._v(
                    "Until the whole withdrawal amount (including the directly withdrawable balance returned above) is filled, try to withdraw and exchange each of the other currencies held by the Stable Pool (DAI, USDC, USDT, TUSD, BUSD, sUSD, and mUSD) to the desired output currency:\n"
                  ),
                  _c("ol", [
                    _c("li", [
                      _vm._v("User calls "),
                      _c("code", [
                        _vm._v(
                          "uint256 RariFundManager.getRawFundBalance(string currencyCode)"
                        )
                      ]),
                      _vm._v(
                        " to get the raw total balance held by the Stable Pool of the potential input currency in question."
                      )
                    ]),
                    _vm._v(" "),
                    _c("li", [
                      _vm._v(
                        "Get exchange data from mStable (preferably) and/or 0x:\n"
                      ),
                      _c("ul", [
                        _c("li", [
                          _vm._v(
                            "If output currency is DAI, USDC, USDT, TUSD, or mUSD, get exchange data via mStable:\n"
                          ),
                          _c("ul", [
                            _c("li", [
                              _vm._v(
                                "If input currency is DAI, USDC, USDT, or TUSD, check "
                              ),
                              _c("code", [
                                _vm._v(
                                  "(bool, string, uint256, uint256) MassetValidationHelper(0xabcc93c3be238884cc3309c19afd128fafc16911).getMaxSwap(0xe2f2a5c287993345a840db3b0845fbc70f5935a5, address _input, address _output)"
                                )
                              ]),
                              _vm._v(". If the first returned value is "),
                              _c("code", [_vm._v("true")]),
                              _vm._v(
                                ", the user can exchange a maximum input amount of the third returned value."
                              )
                            ]),
                            _vm._v(" "),
                            _c("li", [
                              _vm._v("If input currency is mUSD, check "),
                              _c("code", [
                                _vm._v(
                                  "(bool, string, uint256 output, uint256 bassetQuantityArg) MassetValidationHelper(0xabcc93c3be238884cc3309c19afd128fafc16911).getRedeemValidity(0xabcc93c3be238884cc3309c19afd128fafc16911, uint256 _mAssetQuantity, address _outputBasset)"
                                )
                              ]),
                              _vm._v(". If the first returned value is "),
                              _c("code", [_vm._v("true")]),
                              _vm._v(
                                ", the user can exchange a maximum input amount of "
                              ),
                              _c("code", [_vm._v("bassetQuantityArg")]),
                              _vm._v(" (the fourth returned value).")
                            ])
                          ])
                        ]),
                        _vm._v(" "),
                        _c("li", [
                          _vm._v(
                            "If exchange via mStable is not possible (or if the user wants to exchange additional funds via 0x if mStable cannot exchange it all), retrieve order data from 0x:\n"
                          ),
                          _c("ul", [
                            _c("li", [
                              _vm._v(
                                "If the raw total balance of this input currency is enough to cover the remaining withdrawal amount, user retrieves data from the 0x swap quote API (see "
                              ),
                              _c(
                                "a",
                                {
                                  attrs: {
                                    href:
                                      "https://0x.org/docs/api#get-swapv0quote",
                                    target: "_blank",
                                    rel: "noopener noreferrer"
                                  }
                                },
                                [_vm._v("documentation"), _c("OutboundLink")],
                                1
                              ),
                              _vm._v(" and "),
                              _c(
                                "a",
                                {
                                  attrs: {
                                    href:
                                      "https://api.0x.org/swap/v0/quote?sellToken=DAI&buyToken=USDC&sellAmount=1000000000000000000",
                                    target: "_blank",
                                    rel: "noopener noreferrer"
                                  }
                                },
                                [_vm._v("endpoint"), _c("OutboundLink")],
                                1
                              ),
                              _vm._v(") where:\n"),
                              _c("ul", [
                                _c("li", [
                                  _c("code", [_vm._v("sellToken")]),
                                  _vm._v(
                                    " is the input currency to be directly withdrawn from the Stable Pool"
                                  )
                                ]),
                                _vm._v(" "),
                                _c("li", [
                                  _c("code", [_vm._v("buyToken")]),
                                  _vm._v(
                                    " is the output currency to be sent to the user"
                                  )
                                ]),
                                _vm._v(" "),
                                _c("li", [
                                  _c("code", [_vm._v("buyAmount")]),
                                  _vm._v(
                                    " is the amount of output currency to be sent to the user in this exchange only"
                                  )
                                ])
                              ])
                            ])
                          ])
                        ])
                      ])
                    ])
                  ])
                ]),
                _vm._v(" "),
                _c("li", [
                  _vm._v("User calls "),
                  _c("code", [
                    _vm._v(
                      "bool RariFundProxy.withdrawAndExchange(string[] inputCurrencyCodes, uint256[] inputAmounts, address outputErc20Contract, LibOrder.Order[][] orders, bytes[][] signatures, uint256[] makerAssetFillAmounts, uint256[] protocolFees)"
                    )
                  ]),
                  _vm._v(" where:\n"),
                  _c("ol", [
                    _c("li", [
                      _vm._v(
                        "inputCurrencyCodes is an array of input currency codes\n"
                      ),
                      _c("ol", [
                        _c("li", [
                          _vm._v(
                            "To directly withdraw the output currency without exchange in the same transaction, simply include the output currency code in "
                          ),
                          _c("code", [_vm._v("inputCurrencyCodes")]),
                          _vm._v(".")
                        ])
                      ])
                    ]),
                    _vm._v(" "),
                    _c("li", [
                      _c("code", [_vm._v("inputAmounts")]),
                      _vm._v(" is an array of input currency amounts\n"),
                      _c("ol", [
                        _c("li", [
                          _vm._v(
                            "To directly withdraw as much of the output currency without exchange in the same transaction, set the corresponding "
                          ),
                          _c("code", [_vm._v("inputAmounts")]),
                          _vm._v(
                            " item to the directly withdrawable raw total balance of that currency."
                          )
                        ])
                      ])
                    ]),
                    _vm._v(" "),
                    _c("li", [
                      _c("code", [_vm._v("outputErc20Contract")]),
                      _vm._v(
                        " is the ERC20 token contract address of the output currency to be sent to the user"
                      )
                    ]),
                    _vm._v(" "),
                    _c("li", [
                      _c("code", [_vm._v("orders")]),
                      _vm._v(
                        " is an array of orders arrays returned by the 0x API\n"
                      ),
                      _c("ol", [
                        _c("li", [
                          _vm._v("To exchange one of "),
                          _c("code", [_vm._v("inputCurrencyCodes")]),
                          _vm._v(
                            " via mStable or to directly withdraw the output currency in the same transaction, set the corresponding "
                          ),
                          _c("code", [_vm._v("orders")]),
                          _vm._v(" item to an empty array.")
                        ])
                      ])
                    ]),
                    _vm._v(" "),
                    _c("li", [
                      _c("code", [_vm._v("signatures")]),
                      _vm._v(
                        " is an array of arrays of signatures from the orders array returned by the 0x API\n"
                      ),
                      _c("ol", [
                        _c("li", [
                          _vm._v("To exchange one of "),
                          _c("code", [_vm._v("inputCurrencyCodes")]),
                          _vm._v(
                            " via mStable or to directly withdraw the output currency in the same transaction, set the corresponding "
                          ),
                          _c("code", [_vm._v("signatures")]),
                          _vm._v(" item to an empty array.")
                        ])
                      ])
                    ]),
                    _vm._v(" "),
                    _c("li", [
                      _c("code", [_vm._v("makerAssetFillAmounts")]),
                      _vm._v(
                        " is an array of output currency amounts to be sent to the user\n"
                      ),
                      _c("ol", [
                        _c("li", [
                          _vm._v("To exchange one of "),
                          _c("code", [_vm._v("inputCurrencyCodes")]),
                          _vm._v(
                            " via mStable or to directly withdraw the output currency in the same transaction, set the corresponding "
                          ),
                          _c("code", [_vm._v("makerAssetFillAmounts")]),
                          _vm._v(" item to 0.")
                        ])
                      ])
                    ]),
                    _vm._v(" "),
                    _c("li", [
                      _c("code", [_vm._v("protocolFees")]),
                      _vm._v(
                        " is an array of protocol fee amounts in ETH wei to be sent to 0x\n"
                      ),
                      _c("ol", [
                        _c("li", [
                          _vm._v("To exchange one of "),
                          _c("code", [_vm._v("inputCurrencyCodes")]),
                          _vm._v(
                            " via mStable instead of 0x or to directly withdraw the output currency in the same transaction, set the corresponding "
                          ),
                          _c("code", [_vm._v("protocolFees")]),
                          _vm._v(" item to 0.")
                        ])
                      ])
                    ])
                  ])
                ])
              ])
            ])
          ])
        ])
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "rspt-rari-stable-pool-token-2" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#rspt-rari-stable-pool-token-2" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" RSPT (Rari Stable Pool Token)")
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "introduction" } }, [
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#introduction" } },
          [_vm._v("#")]
        ),
        _vm._v(" Introduction")
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("Your RSPT (Rari Stable Pool Token) balance is a "),
        _c("em", [
          _vm._v("token-based representation of your Rari Stable Pool balance.")
        ])
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v(
            "RSPT is minted to you when you deposit to the Stable Pool and redeemed (i.e., burned) when you withdraw from the Stable Pool."
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Accrued interest is constantly added to your USD balance supplied to the Stable Pool, meaning the USD value of your RSPT increases. However, your RSPT balance itself does not increase: instead, the exchange rate of RSPT increases at the same rate for every user as they accrue interest."
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "When you transfer your RSPT, you transfer your holdings supplied to the Stable Pool (deposits + interest)."
          )
        ])
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "usage" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#usage" } }, [
          _vm._v("#")
        ]),
        _vm._v(" Usage")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _c("strong", [_vm._v("Get RSPT exchange rate:")]),
          _vm._v(" Divide "),
          _c("code", [_vm._v("RariFundManager.getFundBalance()")]),
          _vm._v(" by "),
          _c("code", [_vm._v("RariFundToken.totalSupply()")]),
          _vm._v(" to get the exchange rate of RSPT in USD (scaled by 1e18).")
        ]),
        _vm._v(" "),
        _c("li", [
          _c("strong", [
            _vm._v(
              "Get my RSPT balance (internal representation of my USD balance supplied):"
            )
          ]),
          _vm._v(" "),
          _c("code", [
            _vm._v("uint256 RariFundToken.balanceOf(address account)")
          ]),
          _vm._v(" returns the amount of RSPT owned by "),
          _c("code", [_vm._v("account")]),
          _vm._v(".")
        ]),
        _vm._v(" "),
        _c("li", [
          _c("strong", [_vm._v("Transfer RSPT:")]),
          _vm._v(" "),
          _c("code", [
            _vm._v(
              "bool RariFundToken.transfer(address recipient, uint256 amount)"
            )
          ]),
          _vm._v(" transfers "),
          _c("code", [_vm._v("amount")]),
          _vm._v(" RSPT to "),
          _c("code", [_vm._v("recipient")]),
          _vm._v(" (as with other ERC20 tokens like RSPT).")
        ]),
        _vm._v(" "),
        _c("li", [
          _c("strong", [_vm._v("Approve RSPT:")]),
          _vm._v(" "),
          _c("code", [
            _vm._v(
              "bool RariFundToken.approve(address spender, uint256 amount)"
            )
          ]),
          _vm._v(" approves "),
          _c("code", [_vm._v("spender")]),
          _vm._v(" to spend the specified "),
          _c("code", [_vm._v("amount")]),
          _vm._v(" of RSPT on behalf of "),
          _c("code", [_vm._v("msg.sender")]),
          _vm._v(" "),
          _c("ul", [
            _c("li", [
              _vm._v("As with the "),
              _c("code", [_vm._v("approve")]),
              _vm._v(
                " functions of other ERC20 contracts, beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729"
              )
            ])
          ])
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("See "),
          _c(
            "a",
            {
              attrs: {
                href: "https://eips.ethereum.org/EIPS/eip-20",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_vm._v("EIP-20: ERC-20 Token Standard"), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " for reference on all common functions of ERC20 tokens like RSPT."
          )
        ])
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "total-supply-interest" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#total-supply-interest" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" Total Supply & Interest")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _c("strong", [_vm._v("Get total USD supplied (by all users):")]),
          _vm._v(" "),
          _c("code", [_vm._v("uint256 RariFundManager.getFundBalance()")]),
          _vm._v(
            " returns the total balance supplied by users to the Rari Stable Pool (all RSPT holders' funds but not unclaimed fees) in USD (scaled by 1e18)."
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _c("strong", [_vm._v("Get total interest accrued (by all users):")]),
          _vm._v(" "),
          _c("code", [_vm._v("int256 RariFundManager.getInterestAccrued()")]),
          _vm._v(
            " returns the total amount of interest accrued (excluding the fees paid on interest) by past and current Rari Stable Pool users (i.e., RSPT holders) in USD (scaled by 1e18)."
          )
        ])
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "fees-2" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#fees-2" } }, [
          _vm._v("#")
        ]),
        _vm._v(" Fees")
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("See "),
        _c(
          "a",
          {
            attrs: {
              href:
                "https://www.notion.so/Fees-e4689d7b800f485098548dd9e9d0a69f",
              target: "_blank",
              rel: "noopener noreferrer"
            }
          },
          [_vm._v("this Notion article"), _c("OutboundLink")],
          1
        ),
        _vm._v(" for more information about fees and where they go.")
      ]),
      _vm._v(" "),
      _c("p", [_c("strong", [_vm._v("Performance Fees")])]),
      _vm._v(" "),
      _c("p", [
        _vm._v("Rari Capital currently takes a "),
        _c("em", [_vm._v("9.5% performance fee")]),
        _vm._v(" on all interest accrued by the Rari Stable Pool.")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v(
            "This fee is liable to change in the future, but the following method returns its current value at any time."
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Get interest fee rate: "),
          _c("code", [_vm._v("uint256 RariFundManager.getInterestFeeRate()")]),
          _vm._v(
            " returns the fee rate on interest (proportion of raw interest accrued scaled by 1e18)."
          )
        ])
      ]),
      _vm._v(" "),
      _c("p", [_c("strong", [_vm._v("Withdrawal Fees")])]),
      _vm._v(" "),
      _c("p", [
        _vm._v("Rari Capital currently takes a "),
        _c("em", [_vm._v("0.5% withdrawal fee")]),
        _vm._v(" on all withdrawals from the Rari Yield Pool.")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v(
            "This fee is liable to change in the future, but the following method returns its current value at any time."
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Get withdrawal fee rate: "),
          _c("code", [
            _vm._v("uint256 RariFundManager.getWithdrawalFeeRate()")
          ]),
          _vm._v(
            " returns the withdrawal fee rate (proportion of every withdrawal taken as a service fee scaled by 1e18)."
          )
        ])
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "raw-allocations" } }, [
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#raw-allocations" } },
          [_vm._v("#")]
        ),
        _vm._v(" Raw Allocations")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _c("strong", [
            _vm._v(
              "Get raw currency/subpool allocations (including unclaimed fees on interest) and prices:"
            )
          ]),
          _vm._v(" "),
          _c("code", [
            _vm._v(
              "(string[], uint256[], RariFundController.LiquidityPool[][], uint256[][], uint256[]) RariFundProxy.getRawFundBalancesAndPrices()"
            )
          ]),
          _vm._v(
            " returns an array of currency codes, an array of corresponding fund controller contract balances for each currency code, an array of arrays of pool indexes for each currency code, an array of arrays of corresponding balances at each pool index for each currency code, and an array of prices in USD (scaled by 1e18) for each currency code."
          )
        ])
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "internal-stablecoin-pricing" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#internal-stablecoin-pricing" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" Internal Stablecoin Pricing")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Get stablecoin prices (used internally by contracts): "),
          _c("code", [
            _vm._v("uint256[] RariFundPriceConsumer.getCurrencyPricesInUsd()")
          ]),
          _vm._v(
            " returns an array of prices in USD (scaled by 1e18) for all supported stablecoins to which funds can be allocated (DAI, USDC, USDT, TUSD, BUSD, sUSD, and mUSD, in that order).\n"
          ),
          _c("ul", [
            _c("li", [
              _vm._v(
                "Use these prices to calculate the value added to a user's USD balance due to a direct deposit and the value subtracted from a user's USD balance due to a direct withdrawal."
              )
            ])
          ])
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "api" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#api" } }, [
          _vm._v("#")
        ]),
        _vm._v(" API")
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("Welcome to the API docs for "),
        _c("code", [_vm._v("RariFundManager")]),
        _vm._v(", "),
        _c("code", [_vm._v("RariFundToken")]),
        _vm._v(", and "),
        _c("code", [_vm._v("RariFundProxy")]),
        _vm._v(", the smart contracts behind the Rari Stable Pool.")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("See "),
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/Rari-Capital/rari-stable-pool-contracts/blob/master/USAGE.md",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("USAGE.md")]), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " for instructions on common usage of the smart contracts' APIs."
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("See "),
          _c(
            "a",
            {
              attrs: {
                href: "https://eips.ethereum.org/EIPS/eip-20",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_vm._v("EIP-20: ERC-20 Token Standard"), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " for reference on all common functions of ERC20 tokens like RSPT."
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Smart contract ABIs are available in the "),
          _c("code", [_vm._v("abi")]),
          _vm._v(" properties of the JSON files in the "),
          _c("code", [_vm._v("build")]),
          _vm._v(" folder.")
        ])
      ]),
      _vm._v(" "),
      _c("p", [
        _c("em", [
          _vm._v(
            "If you're using JavaScript, don't waste your time directly integrating our smart contracts: the "
          ),
          _c(
            "a",
            {
              attrs: {
                href: "https://github.com/Rari-Capital/rari-sdk",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_vm._v("Rari JavaScript SDK"), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " makes programmatic deposits and withdrawals as easy as just one line of code!"
          )
        ])
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "user-balance-and-interest" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#user-balance-and-interest" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" User Balance and Interest")
      ]),
      _vm._v(" "),
      _c("div", { staticClass: "language- extra-class" }, [
        _c("pre", { pre: true, attrs: { class: "language-text" } }, [
          _c("code", [
            _vm._v("uint256 RariFundManager.balanceOf(address account)\n")
          ])
        ])
      ]),
      _c("p", [
        _vm._v(
          "Returns the total balance in USD (scaled by 1e18) supplied to the Rari Stable Pool by "
        ),
        _c("code", [_vm._v("account")]),
        _vm._v(".")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Parameters:\n"),
          _c("ul", [
            _c("li", [
              _c("code", [_vm._v("account")]),
              _vm._v(
                " (address) - The account whose balance we are calculating."
              )
            ])
          ])
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Development notes:\n"),
          _c("ul", [
            _c("li", [
              _c("em", [
                _vm._v("Ideally, we can add the "),
                _c("code", [_vm._v("view")]),
                _vm._v(" modifier, but Compound's "),
                _c("code", [_vm._v("getUnderlyingBalance")]),
                _vm._v(" function (called by "),
                _c("code", [_vm._v("getRawFundBalance")]),
                _vm._v(") potentially modifies the state.")
              ])
            ])
          ])
        ])
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "deposits-2" } }, [
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#deposits-2" } },
          [_vm._v("#")]
        ),
        _vm._v(" Deposits")
      ]),
      _vm._v(" "),
      _c("div", { staticClass: "language- extra-class" }, [
        _c("pre", { pre: true, attrs: { class: "language-text" } }, [
          _c("code", [
            _vm._v(
              "bool RariFundManager.isCurrencyAccepted(string currencyCode)\n"
            )
          ])
        ])
      ]),
      _c("p", [
        _vm._v("Returns a boolean indicating if deposits in "),
        _c("code", [_vm._v("currencyCode")]),
        _vm._v(" are currently accepted.")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Parameters:\n"),
          _c("ul", [
            _c("li", [
              _c("code", [_vm._v("currencyCode")]),
              _vm._v(" (string): The currency code to check.")
            ])
          ])
        ])
      ]),
      _vm._v(" "),
      _c("div", { staticClass: "language- extra-class" }, [
        _c("pre", { pre: true, attrs: { class: "language-text" } }, [
          _c("code", [
            _vm._v("string[] RariFundManager.getAcceptedCurrencies()\n")
          ])
        ])
      ]),
      _c("p", [
        _vm._v(
          "Returns an array of currency codes currently accepted for deposits."
        )
      ]),
      _vm._v(" "),
      _c("hr"),
      _vm._v(" "),
      _c("div", { staticClass: "language- extra-class" }, [
        _c("pre", { pre: true, attrs: { class: "language-text" } }, [
          _c("code", [
            _vm._v(
              "RariFundProxy.deposit(string currencyCode, uint256 amount)\n"
            )
          ])
        ])
      ]),
      _c("p", [
        _c("em", [
          _c("strong", [
            _vm._v("For the time being, we are no longer subsidizing gas fees.")
          ])
        ])
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Deposits funds to the Rari Stable Pool in exchange for RSPT (with GSN support)."
        )
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("You may only deposit currencies accepted by the fund (see "),
          _c("code", [
            _vm._v("RariFundManager.isCurrencyAccepted(string currencyCode)")
          ]),
          _vm._v(").")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Please note that you must approve RariFundProxy to transfer at least "
          ),
          _c("code", [_vm._v("amount")]),
          _vm._v(".")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Parameters:\n"),
          _c("ul", [
            _c("li", [
              _c("code", [_vm._v("currencyCode")]),
              _vm._v(
                " (string): The currency code of the token to be deposited."
              )
            ]),
            _vm._v(" "),
            _c("li", [
              _c("code", [_vm._v("amount")]),
              _vm._v(" (uint256): The amount of tokens to be deposited.")
            ])
          ])
        ])
      ]),
      _vm._v(" "),
      _c("div", { staticClass: "language- extra-class" }, [
        _c("pre", { pre: true, attrs: { class: "language-text" } }, [
          _c("code", [
            _vm._v(
              "RariFundManager.deposit(string currencyCode, uint256 amount)\n"
            )
          ])
        ])
      ]),
      _c("p", [
        _vm._v("Deposits funds to the Rari Stable Pool in exchange for RSPT.")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("You may only deposit currencies accepted by the fund (see "),
          _c("code", [
            _vm._v("RariFundManager.isCurrencyAccepted(string currencyCode)")
          ]),
          _vm._v("). However, "),
          _c("code", [_vm._v("RariFundProxy.exchangeAndDeposit")]),
          _vm._v(
            " exchanges your funds via 0x and deposits them in one transaction."
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Please note that you must approve RariFundManager to transfer at least "
          ),
          _c("code", [_vm._v("amount")]),
          _vm._v(".")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Parameters:\n"),
          _c("ul", [
            _c("li", [
              _c("code", [_vm._v("currencyCode")]),
              _vm._v(
                " (string): The currency code of the token to be deposited."
              )
            ]),
            _vm._v(" "),
            _c("li", [
              _c("code", [_vm._v("amount")]),
              _vm._v(" (uint256): The amount of tokens to be deposited.")
            ])
          ])
        ])
      ]),
      _vm._v(" "),
      _c("div", { staticClass: "language- extra-class" }, [
        _c("pre", { pre: true, attrs: { class: "language-text" } }, [
          _c("code", [
            _vm._v(
              "RariFundProxy.exchangeAndDeposit(address inputErc20Contract, uint256 inputAmount, string outputCurrencyCode, LibOrder.Order[] orders, bytes[] signatures, uint256 takerAssetFillAmount)\n"
            )
          ])
        ])
      ]),
      _c("p", [
        _vm._v(
          "Exchanges and deposits funds to the Rari Stable Pool in exchange for RSPT (via 0x)."
        )
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("You can retrieve order data from the "),
          _c(
            "a",
            {
              attrs: {
                href: "https://0x.org/docs/api#get-swapv0quote",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_vm._v("0x swap API"), _c("OutboundLink")],
            1
          ),
          _vm._v(". See "),
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/Rari-Capital/rari-stable-pool-contracts/blob/master/USAGE.md",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("USAGE.md")]), _c("OutboundLink")],
            1
          ),
          _vm._v(", the SDK, or the web client for implementation.")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Please note that you must approve RariFundProxy to transfer at least "
          ),
          _c("code", [_vm._v("inputAmount")]),
          _vm._v(" unless you are inputting ETH.")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "You also must input at least enough ETH to cover the protocol fee (and enough to cover "
          ),
          _c("code", [_vm._v("orders")]),
          _vm._v(" if you are inputting ETH).")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Parameters:\n"),
          _c("ul", [
            _c("li", [
              _c("code", [_vm._v("inputErc20Contract")]),
              _vm._v(
                " (address): The ERC20 contract address of the token to be exchanged. Set to address(0) to input ETH."
              )
            ]),
            _vm._v(" "),
            _c("li", [
              _c("code", [_vm._v("inputAmount")]),
              _vm._v(
                " (uint256): The amount of tokens to be exchanged (including taker fees)."
              )
            ]),
            _vm._v(" "),
            _c("li", [
              _c("code", [_vm._v("outputCurrencyCode")]),
              _vm._v(
                " (string): The currency code of the token to be deposited after exchange."
              )
            ]),
            _vm._v(" "),
            _c("li", [
              _c("code", [_vm._v("orders")]),
              _vm._v(
                " (LibOrder.Order[]): The limit orders to be filled in ascending order of the price you pay."
              )
            ]),
            _vm._v(" "),
            _c("li", [
              _c("code", [_vm._v("signatures")]),
              _vm._v(" (bytes[]): The signatures for the orders.")
            ]),
            _vm._v(" "),
            _c("li", [
              _c("code", [_vm._v("takerAssetFillAmount")]),
              _vm._v(
                " (uint256): The amount of the taker asset to sell (excluding taker fees)."
              )
            ])
          ])
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Development notes:\n"),
          _c("ul", [
            _c("li", [
              _c("em", [
                _vm._v(
                  "We should be able to make this function external and use calldata for all parameters, but "
                ),
                _c(
                  "a",
                  {
                    attrs: {
                      href: "https://github.com/ethereum/solidity/issues/5479",
                      target: "_blank",
                      rel: "noopener noreferrer"
                    }
                  },
                  [
                    _vm._v("Solidity does not support calldata structs"),
                    _c("OutboundLink")
                  ],
                  1
                ),
                _vm._v(".")
              ])
            ])
          ])
        ])
      ]),
      _vm._v(" "),
      _c("div", { staticClass: "language- extra-class" }, [
        _c("pre", { pre: true, attrs: { class: "language-text" } }, [
          _c("code", [
            _vm._v(
              "RariFundProxy.exchangeAndDeposit(string inputCurrencyCode, uint256 inputAmount, string outputCurrencyCode)\n"
            )
          ])
        ])
      ]),
      _c("p", [
        _vm._v(
          "Exchanges and deposits funds to the Rari Stable Pool in exchange for RSPT (no slippage and low fees via mStable, but only supports DAI, USDC, USDT, TUSD, and mUSD)."
        )
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v(
            "Please note that you must approve RariFundProxy to transfer at least "
          ),
          _c("code", [_vm._v("inputAmount")]),
          _vm._v(".")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Parameters:\n"),
          _c("ul", [
            _c("li", [
              _c("code", [_vm._v("inputCurrencyCode")]),
              _vm._v(
                " (string): The currency code of the token to be exchanged."
              )
            ]),
            _vm._v(" "),
            _c("li", [
              _c("code", [_vm._v("inputAmount")]),
              _vm._v(
                " (uint256): The amount of tokens to be exchanged (including taker fees)."
              )
            ]),
            _vm._v(" "),
            _c("li", [
              _c("code", [_vm._v("outputCurrencyCode")]),
              _vm._v(
                " (string): The currency code of the token to be deposited after exchange."
              )
            ])
          ])
        ])
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "withdrawals-2" } }, [
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#withdrawals-2" } },
          [_vm._v("#")]
        ),
        _vm._v(" Withdrawals")
      ]),
      _vm._v(" "),
      _c("div", { staticClass: "language- extra-class" }, [
        _c("pre", { pre: true, attrs: { class: "language-text" } }, [
          _c("code", [
            _vm._v(
              "RariFundManager.withdraw(string currencyCode, uint256 amount)\n"
            )
          ])
        ])
      ]),
      _c("p", [
        _vm._v(
          "Withdraws funds from the Rari Stable Pool in exchange for RSPT."
        )
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("You may only withdraw currencies held by the fund (see "),
          _c("code", [
            _vm._v("RariFundManager.getRawFundBalance(string currencyCode)")
          ]),
          _vm._v("). However, "),
          _c("code", [_vm._v("RariFundProxy.withdrawAndExchange")]),
          _vm._v(
            " withdraws your funds and exchanges them via 0x in one transaction."
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Please note that you must approve RariFundManager to burn of the necessary amount of RSPT."
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Parameters:\n"),
          _c("ul", [
            _c("li", [
              _c("code", [_vm._v("currencyCode")]),
              _vm._v(
                " (string): The currency code of the token to be withdrawn."
              )
            ]),
            _vm._v(" "),
            _c("li", [
              _c("code", [_vm._v("amount")]),
              _vm._v(" (uint256): The amount of tokens to be withdrawn.")
            ])
          ])
        ])
      ]),
      _vm._v(" "),
      _c("div", { staticClass: "language- extra-class" }, [
        _c("pre", { pre: true, attrs: { class: "language-text" } }, [
          _c("code", [
            _vm._v(
              "RariFundProxy.withdrawAndExchange(string[] inputCurrencyCodes, uint256[] inputAmounts, address outputErc20Contract, LibOrder.Order[][] orders, bytes[][] signatures, uint256[] makerAssetFillAmounts, uint256[] protocolFees)\n"
            )
          ])
        ])
      ]),
      _c("p", [
        _vm._v(
          "Withdraws funds from the Rari Stable Pool in exchange for RSPT and exchanges to them to the desired currency (if no 0x orders are supplied, exchanges DAI, USDC, USDT, TUSD, and mUSD via mStable)."
        )
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("You can retrieve order data from the "),
          _c(
            "a",
            {
              attrs: {
                href: "https://0x.org/docs/api#get-swapv0quote",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_vm._v("0x swap API"), _c("OutboundLink")],
            1
          ),
          _vm._v(". See "),
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/Rari-Capital/rari-stable-pool-contracts/blob/master/USAGE.md",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("code", [_vm._v("USAGE.md")]), _c("OutboundLink")],
            1
          ),
          _vm._v(", the SDK, or the web client for implementation.")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Please note that you must approve RariFundManager to burn of the necessary amount of RSPT. You also must input at least enough ETH to cover the protocol fees."
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Parameters:\n"),
          _c("ul", [
            _c("li", [
              _c("code", [_vm._v("inputCurrencyCodes")]),
              _vm._v(
                " (string[]): The currency codes of the tokens to be withdrawn and exchanged.\n"
              ),
              _c("ul", [
                _c("li", [
                  _vm._v(
                    "To directly withdraw the output currency without exchange in the same transaction, simply include the output currency code in "
                  ),
                  _c("code", [_vm._v("inputCurrencyCodes")]),
                  _vm._v(".")
                ])
              ])
            ]),
            _vm._v(" "),
            _c("li", [
              _c("code", [_vm._v("inputAmounts")]),
              _vm._v(
                " (uint256[]): The amounts of tokens to be withdrawn and exchanged (including taker fees).\n"
              ),
              _c("ul", [
                _c("li", [
                  _vm._v(
                    "To directly withdraw as much of the output currency without exchange in the same transaction, set the corresponding "
                  ),
                  _c("code", [_vm._v("inputAmounts")]),
                  _vm._v(
                    " item to the directly withdrawable raw fund balance of that currency."
                  )
                ])
              ])
            ]),
            _vm._v(" "),
            _c("li", [
              _c("code", [_vm._v("outputErc20Contract")]),
              _vm._v(
                " (address): The ERC20 contract address of the token to be outputted by the exchange. Set to address(0) to output ETH."
              )
            ]),
            _vm._v(" "),
            _c("li", [
              _c("code", [_vm._v("orders")]),
              _vm._v(
                " (LibOrder.Order[][]): The 0x limit orders to be filled in ascending order of the price you pay.\n"
              ),
              _c("ul", [
                _c("li", [
                  _vm._v("To exchange one of "),
                  _c("code", [_vm._v("inputCurrencyCodes")]),
                  _vm._v(
                    " via mStable or to directly withdraw the output currency in the same transaction, set the corresponding "
                  ),
                  _c("code", [_vm._v("orders")]),
                  _vm._v(" item to an empty array.")
                ])
              ])
            ]),
            _vm._v(" "),
            _c("li", [
              _c("code", [_vm._v("signatures")]),
              _vm._v(" (bytes[][]): The signatures for the 0x orders.\n"),
              _c("ul", [
                _c("li", [
                  _vm._v("To exchange one of "),
                  _c("code", [_vm._v("inputCurrencyCodes")]),
                  _vm._v(
                    " via mStable or to directly withdraw the output currency in the same transaction, set the corresponding "
                  ),
                  _c("code", [_vm._v("signatures")]),
                  _vm._v(" item to an empty array.")
                ])
              ])
            ]),
            _vm._v(" "),
            _c("li", [
              _c("code", [_vm._v("makerAssetFillAmounts")]),
              _vm._v(" (uint256[]): The amounts of the maker assets to buy.\n"),
              _c("ul", [
                _c("li", [
                  _vm._v("To exchange one of "),
                  _c("code", [_vm._v("inputCurrencyCodes")]),
                  _vm._v(
                    " via mStable or to directly withdraw the output currency in the same transaction, set the corresponding "
                  ),
                  _c("code", [_vm._v("makerAssetFillAmounts")]),
                  _vm._v(" item to 0.")
                ])
              ])
            ]),
            _vm._v(" "),
            _c("li", [
              _c("code", [_vm._v("protocolFees")]),
              _vm._v(
                " (uint256[]): The protocol fees to pay to 0x in ETH for each order.\n"
              ),
              _c("ul", [
                _c("li", [
                  _vm._v("To exchange one of "),
                  _c("code", [_vm._v("inputCurrencyCodes")]),
                  _vm._v(
                    " via mStable instead of 0x or to directly withdraw the output currency in the same transaction, set the corresponding "
                  ),
                  _c("code", [_vm._v("protocolFees")]),
                  _vm._v(" item to 0.")
                ])
              ])
            ])
          ])
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Development notes:\n"),
          _c("ul", [
            _c("li", [
              _c("em", [
                _vm._v(
                  "We should be able to make this function external and use calldata for all parameters, but "
                ),
                _c(
                  "a",
                  {
                    attrs: {
                      href: "https://github.com/ethereum/solidity/issues/5479",
                      target: "_blank",
                      rel: "noopener noreferrer"
                    }
                  },
                  [
                    _vm._v("Solidity does not support calldata structs"),
                    _c("OutboundLink")
                  ],
                  1
                ),
                _vm._v(".")
              ])
            ])
          ])
        ])
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "rspt" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#rspt" } }, [
          _vm._v("#")
        ]),
        _vm._v(" RSPT")
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("See "),
        _c(
          "a",
          {
            attrs: {
              href: "https://eips.ethereum.org/EIPS/eip-20",
              target: "_blank",
              rel: "noopener noreferrer"
            }
          },
          [_vm._v("EIP-20: ERC-20 Token Standard"), _c("OutboundLink")],
          1
        ),
        _vm._v(
          " for reference on all common functions of ERC20 tokens like RSPT. Here are a few of the most common ones:"
        )
      ]),
      _vm._v(" "),
      _c("div", { staticClass: "language- extra-class" }, [
        _c("pre", { pre: true, attrs: { class: "language-text" } }, [
          _c("code", [
            _vm._v("uint256 RariFundToken.balanceOf(address account)\n")
          ])
        ])
      ]),
      _c("p", [
        _vm._v("Returns the amount of RSPT owned by "),
        _c("code", [_vm._v("account")]),
        _vm._v(".")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v(
            "A user's RSPT balance is an internal representation of their USD balance.\n"
          ),
          _c("ul", [
            _c("li", [
              _vm._v(
                "While a user's USD balance is constantly increasing as the Rari Stable Pool accrues interest, a user's RSPT balance does not change except on deposit, withdrawal, and transfer."
              )
            ]),
            _vm._v(" "),
            _c("li", [
              _vm._v(
                "The price of RSPT is equivalent to the current value of the first $1 USD deposited to the Rari Stable Pool."
              )
            ])
          ])
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Parameters:\n"),
          _c("ul", [
            _c("li", [
              _c("code", [_vm._v("account")]),
              _vm._v(
                " (address) - The account whose balance we are retrieving."
              )
            ])
          ])
        ])
      ]),
      _vm._v(" "),
      _c("div", { staticClass: "language- extra-class" }, [
        _c("pre", { pre: true, attrs: { class: "language-text" } }, [
          _c("code", [
            _vm._v(
              "bool RariFundToken.transfer(address recipient, uint256 amount)\n"
            )
          ])
        ])
      ]),
      _c("p", [
        _vm._v("Transfers the specified "),
        _c("code", [_vm._v("amount")]),
        _vm._v(" of RSPT to "),
        _c("code", [_vm._v("recipient")]),
        _vm._v(".")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Parameters:\n"),
          _c("ul", [
            _c("li", [
              _c("code", [_vm._v("recipient")]),
              _vm._v(" (address): The recipient of the RSPT.")
            ]),
            _vm._v(" "),
            _c("li", [
              _c("code", [_vm._v("inputAmounts")]),
              _vm._v(
                " (uint256[]): The amounts of tokens to be withdrawn and exchanged (including taker fees)."
              )
            ])
          ])
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("Return value: Boolean indicating success.")])
      ]),
      _vm._v(" "),
      _c("div", { staticClass: "language- extra-class" }, [
        _c("pre", { pre: true, attrs: { class: "language-text" } }, [
          _c("code", [
            _vm._v(
              "bool RariFundToken.approve(address spender, uint256 amount)\n"
            )
          ])
        ])
      ]),
      _c("p", [
        _vm._v("Approve "),
        _c("code", [_vm._v("sender")]),
        _vm._v(" to spend the specified "),
        _c("code", [_vm._v("amount")]),
        _vm._v(" of RSPT on behalf of "),
        _c("code", [_vm._v("msg.sender")]),
        _vm._v(".")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("As with the "),
          _c("code", [_vm._v("approve")]),
          _vm._v(
            " functions of other ERC20 contracts, beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Parameters:\n"),
          _c("ul", [
            _c("li", [
              _c("code", [_vm._v("spender")]),
              _vm._v(
                " (address) - The account to which we are setting an allowance."
              )
            ]),
            _vm._v(" "),
            _c("li", [
              _c("code", [_vm._v("amount")]),
              _vm._v(" (uint256) - The amount of the allowance to be set.")
            ])
          ])
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("Return value: Boolean indicating success.")])
      ]),
      _vm._v(" "),
      _c("div", { staticClass: "language- extra-class" }, [
        _c("pre", { pre: true, attrs: { class: "language-text" } }, [
          _c("code", [_vm._v("uint256 RariFundToken.totalSupply()\n")])
        ])
      ]),
      _c("p", [_vm._v("Returns the total supply of RSPT (scaled by 1e18).")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Divide "),
          _c("code", [_vm._v("RariFundManager.getFundBalance()")]),
          _vm._v(" by "),
          _c("code", [_vm._v("RariFundToken.totalSupply()")]),
          _vm._v(" to get the exchange rate of RSPT in USD (scaled by 1e18).")
        ])
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "total-supply-and-interest" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#total-supply-and-interest" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" Total Supply and Interest")
      ]),
      _vm._v(" "),
      _c("div", { staticClass: "language- extra-class" }, [
        _c("pre", { pre: true, attrs: { class: "language-text" } }, [
          _c("code", [_vm._v("uint256 RariFundManager.getFundBalance()\n")])
        ])
      ]),
      _c("p", [
        _vm._v(
          "Returns the total balance supplied by users to the Rari Stable Pool (all RSPT holders' funds but not unclaimed fees) in USD (scaled by 1e18)."
        )
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Development notes:\n"),
          _c("ul", [
            _c("li", [
              _c("em", [
                _vm._v("Ideally, we can add the "),
                _c("code", [_vm._v("view")]),
                _vm._v(" modifier, but Compound's "),
                _c("code", [_vm._v("getUnderlyingBalance")]),
                _vm._v(" function (called by "),
                _c("code", [_vm._v("getRawFundBalance")]),
                _vm._v(") potentially modifies the state.")
              ])
            ])
          ])
        ])
      ]),
      _vm._v(" "),
      _c("div", { staticClass: "language- extra-class" }, [
        _c("pre", { pre: true, attrs: { class: "language-text" } }, [
          _c("code", [_vm._v("int256 RariFundManager.getInterestAccrued()\n")])
        ])
      ]),
      _c("p", [
        _vm._v(
          "Returns the total amount of interest accrued (excluding the fees paid on interest) by past and current Rari Stable Pool users (i.e., RSPT holders) in USD (scaled by 1e18)."
        )
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Development notes:\n"),
          _c("ul", [
            _c("li", [
              _c("em", [
                _vm._v("Ideally, we can add the "),
                _c("code", [_vm._v("view")]),
                _vm._v(" modifier, but Compound's "),
                _c("code", [_vm._v("getUnderlyingBalance")]),
                _vm._v(" function (called by "),
                _c("code", [_vm._v("getRawFundBalance")]),
                _vm._v(") potentially modifies the state.")
              ])
            ])
          ])
        ])
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "fees-3" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#fees-3" } }, [
          _vm._v("#")
        ]),
        _vm._v(" Fees")
      ]),
      _vm._v(" "),
      _c("div", { staticClass: "language- extra-class" }, [
        _c("pre", { pre: true, attrs: { class: "language-text" } }, [
          _c("code", [_vm._v("uint256 RariFundManager.getInterestFeeRate()\n")])
        ])
      ]),
      _c("p", [
        _vm._v(
          "Returns the fee rate on interest (proportion of raw interest accrued scaled by 1e18)."
        )
      ]),
      _vm._v(" "),
      _c("div", { staticClass: "language- extra-class" }, [
        _c("pre", { pre: true, attrs: { class: "language-text" } }, [
          _c("code", [
            _vm._v("int256 RariFundManager.getInterestFeesGenerated()\n")
          ])
        ])
      ]),
      _c("p", [
        _vm._v(
          "Returns the amount of interest fees accrued by beneficiaries in USD (scaled by 1e18)."
        )
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Development notes:\n"),
          _c("ul", [
            _c("li", [
              _c("em", [
                _vm._v("Ideally, we can add the "),
                _c("code", [_vm._v("view")]),
                _vm._v(" modifier, but Compound's "),
                _c("code", [_vm._v("getUnderlyingBalance")]),
                _vm._v(" function (called by "),
                _c("code", [_vm._v("getRawFundBalance")]),
                _vm._v(") potentially modifies the state.")
              ])
            ])
          ])
        ])
      ]),
      _vm._v(" "),
      _c("div", { staticClass: "language- extra-class" }, [
        _c("pre", { pre: true, attrs: { class: "language-text" } }, [
          _c("code", [
            _vm._v("uint256 RariFundManager.getWithdrawalFeeRate()\n")
          ])
        ])
      ]),
      _c("p", [
        _vm._v(
          "Returns the withdrawal fee rate (proportion of every withdrawal taken as a service fee scaled by 1e18)."
        )
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "raw-total-supply-allocations-and-interest" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#raw-total-supply-allocations-and-interest" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" Raw Total Supply, Allocations, and Interest")
      ]),
      _vm._v(" "),
      _c("div", { staticClass: "language- extra-class" }, [
        _c("pre", { pre: true, attrs: { class: "language-text" } }, [
          _c("code", [_vm._v("uint256 RariFundManager.getRawFundBalance()\n")])
        ])
      ]),
      _c("p", [
        _vm._v(
          "Returns the raw total balance of the Rari Stable Pool (all RSPT holders' funds + all unclaimed fees) of all currencies in USD (scaled by 1e18)."
        )
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Development notes:\n"),
          _c("ul", [
            _c("li", [
              _c("em", [
                _vm._v("Ideally, we can add the "),
                _c("code", [_vm._v("view")]),
                _vm._v(" modifier, but Compound's "),
                _c("code", [_vm._v("getUnderlyingBalance")]),
                _vm._v(" function (called by "),
                _c("code", [_vm._v("getRawFundBalance")]),
                _vm._v(") potentially modifies the state.")
              ])
            ])
          ])
        ])
      ]),
      _vm._v(" "),
      _c("div", { staticClass: "language- extra-class" }, [
        _c("pre", { pre: true, attrs: { class: "language-text" } }, [
          _c("code", [
            _vm._v(
              "uint256 RariFundManager.getRawFundBalance(string currencyCode)\n"
            )
          ])
        ])
      ]),
      _c("p", [
        _vm._v(
          "Returns the raw total balance of the Rari Stable Pool (all RSPT holders' funds + all unclaimed fees) of the specified currency."
        )
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Parameters:\n"),
          _c("ul", [
            _c("li", [
              _c("code", [_vm._v("currencyCode")]),
              _vm._v(
                " (string): The currency code of the balance to be calculated."
              )
            ])
          ])
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Development notes:\n"),
          _c("ul", [
            _c("li", [
              _c("em", [
                _vm._v("Ideally, we can add the "),
                _c("code", [_vm._v("view")]),
                _vm._v(" modifier, but Compound's "),
                _c("code", [_vm._v("getUnderlyingBalance")]),
                _vm._v(" function (called by "),
                _c("code", [_vm._v("RariFundController.getPoolBalance")]),
                _vm._v(") potentially modifies the state.")
              ])
            ])
          ])
        ])
      ]),
      _vm._v(" "),
      _c("div", { staticClass: "language- extra-class" }, [
        _c("pre", { pre: true, attrs: { class: "language-text" } }, [
          _c("code", [
            _vm._v(
              "(string[], uint256[], RariFundController.LiquidityPool[][], uint256[][], uint256[]) RariFundProxy.getRawFundBalancesAndPrices()\n"
            )
          ])
        ])
      ]),
      _c("p", [
        _vm._v(
          "Returns the fund controller's contract balance of each currency, balance of each pool of each currency (checking "
        ),
        _c("code", [_vm._v("_poolsWithFunds")]),
        _vm._v(" first to save gas), and price of each currency.")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v(
            "Return values: An array of currency codes, an array of corresponding fund controller contract balances for each currency code, an array of arrays of pool indexes for each currency code, an array of arrays of corresponding balances at each pool index for each currency code, and an array of prices in USD (scaled by 1e18) for each currency code."
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Development notes:\n"),
          _c("ul", [
            _c("li", [
              _c("em", [
                _vm._v("Ideally, we can add the "),
                _c("code", [_vm._v("view")]),
                _vm._v(" modifier, but Compound's "),
                _c("code", [_vm._v("getUnderlyingBalance")]),
                _vm._v(" function (called by "),
                _c("code", [_vm._v("getPoolBalance")]),
                _vm._v(") potentially modifies the state.")
              ])
            ])
          ])
        ])
      ]),
      _vm._v(" "),
      _c("div", { staticClass: "language- extra-class" }, [
        _c("pre", { pre: true, attrs: { class: "language-text" } }, [
          _c("code", [
            _vm._v("int256 RariFundManager.getRawInterestAccrued()\n")
          ])
        ])
      ]),
      _c("p", [
        _vm._v(
          "Returns the raw total amount of interest accrued by the Rari Stable Pool (including the fees paid on interest) in USD (scaled by 1e18)."
        )
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Development notes:\n"),
          _c("ul", [
            _c("li", [
              _c("em", [
                _vm._v("Ideally, we can add the "),
                _c("code", [_vm._v("view")]),
                _vm._v(" modifier, but Compound's "),
                _c("code", [_vm._v("getUnderlyingBalance")]),
                _vm._v(" function (called by "),
                _c("code", [_vm._v("getRawFundBalance")]),
                _vm._v(") potentially modifies the state.")
              ])
            ])
          ])
        ])
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "internal-stablecoin-pricing-2" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#internal-stablecoin-pricing-2" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" Internal Stablecoin Pricing")
      ]),
      _vm._v(" "),
      _c("div", { staticClass: "language- extra-class" }, [
        _c("pre", { pre: true, attrs: { class: "language-text" } }, [
          _c("code", [
            _vm._v("uint256[] RariFundPriceConsumer.getCurrencyPricesInUsd()\n")
          ])
        ])
      ]),
      _c("p", [
        _vm._v(
          "Returns the prices of all supported stablecoins to which funds can be allocated."
        )
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v(
            "Use these prices to calculate the value added to a user's USD balance due to a direct deposit and the value subtracted from a user's USD balance due to a direct withdrawal."
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Return value: An array of prices in USD (scaled by 1e18) corresponding to the following list of currencies in the following order: DAI, USDC, USDT, TUSD, BUSD, sUSD, and mUSD."
          )
        ])
      ]),
      _vm._v(" "),
      _c(
        "h2",
        { attrs: { id: "installation-for-deployment-and-development" } },
        [
          _c(
            "a",
            {
              staticClass: "header-anchor",
              attrs: { href: "#installation-for-deployment-and-development" }
            },
            [_vm._v("#")]
          ),
          _vm._v(" Installation (for deployment and development)")
        ]
      ),
      _vm._v(" "),
      _c("p", [
        _vm._v("We, as well as others, had success using Truffle on Node.js "),
        _c("code", [_vm._v("v12.18.2")]),
        _vm._v(" with the latest version of NPM.")
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("To install the latest version of Truffle: "),
        _c("code", [_vm._v("npm install -g truffle")])
      ]),
      _vm._v(" "),
      _c("p", [
        _c("em", [
          _vm._v(
            "Though the latest version of Truffle should work, to compile, deploy, and test our contracts, we used Truffle "
          ),
          _c("code", [_vm._v("v5.1.45")]),
          _vm._v(" (which should use "),
          _c("code", [_vm._v("solc")]),
          _vm._v(" version "),
          _c("code", [_vm._v("0.5.17+commit.d19bba13.Emscripten.clang")]),
          _vm._v(" and Web3.js "),
          _c("code", [_vm._v("v1.2.1")]),
          _vm._v(").")
        ])
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("To install all our dependencies: "),
        _c("code", [_vm._v("npm install")])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "compiling-contracts" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#compiling-contracts" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" Compiling Contracts")
      ]),
      _vm._v(" "),
      _c("div", { staticClass: "language- extra-class" }, [
        _c("pre", { pre: true, attrs: { class: "language-text" } }, [
          _c("code", [_vm._v("npm run compile\n")])
        ])
      ]),
      _c("h2", { attrs: { id: "testing-contracts" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#testing-contracts" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" Testing Contracts")
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("In "),
        _c("code", [_vm._v(".env")]),
        _vm._v(", set "),
        _c("code", [
          _vm._v(
            "DEVELOPMENT_ADDRESS=0x45D54B22582c79c8Fb8f4c4F2663ef54944f397a"
          )
        ]),
        _vm._v(" to test deployment and also set "),
        _c("code", [
          _vm._v(
            "DEVELOPMENT_ADDRESS_SECONDARY=0x1Eeb75CFad36EDb6C996f7809f30952B0CA0B5B9"
          )
        ]),
        _vm._v(" to run automated tests.")
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("If you are upgrading from "),
        _c("code", [_vm._v("v2.4.0")]),
        _vm._v(" or "),
        _c("code", [_vm._v("v2.4.1")]),
        _vm._v(", set "),
        _c("code", [_vm._v("UPGRADE_FROM_LAST_VERSION=1")]),
        _vm._v(" to enable upgrading and configure the following:")
      ]),
      _vm._v(" "),
      _c("div", { staticClass: "language- extra-class" }, [
        _c("pre", { pre: true, attrs: { class: "language-text" } }, [
          _c("code", [
            _vm._v(
              "UPGRADE_OLD_FUND_CONTROLLER=0xEe7162bB5191E8EC803F7635dE9A920159F1F40C\nUPGRADE_FUND_MANAGER_ADDRESS=0xC6BF8C8A55f77686720E0a88e2Fd1fEEF58ddf4a\nUPGRADE_FUND_OWNER_ADDRESS=0x10dB6Bce3F2AE1589ec91A872213DAE59697967a\n"
            )
          ])
        ])
      ]),
      _c("p", [
        _vm._v(
          "Then, copy the OpenZeppelin artifacts for the official deployed "
        ),
        _c("code", [_vm._v("v2.4.0")]),
        _vm._v("/"),
        _c("code", [_vm._v("v2.4.1")]),
        _vm._v(" contracts from "),
        _c("code", [_vm._v(".openzeppelin/mainnet.json")]),
        _vm._v(" to "),
        _c("code", [_vm._v(".openzeppelin/unknown-1337.json")]),
        _vm._v(". If you decide to disable upgrading by setting restoring "),
        _c("code", [_vm._v("UPGRADE_FROM_LAST_VERSION=0")]),
        _vm._v(", make sure to delete "),
        _c("code", [_vm._v(".openzeppelin/unknown-1337.json")]),
        _vm._v(".")
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "To test the contracts, first fork the Ethereum mainnet. Begin by configuring "
        ),
        _c("code", [_vm._v("DEVELOPMENT_WEB3_PROVIDER_URL_TO_BE_FORKED")]),
        _vm._v(" in "),
        _c("code", [_vm._v(".env")]),
        _vm._v(
          " (set to any mainnet Web3 HTTP provider JSON-RPC URL; we use a local "
        ),
        _c("code", [_vm._v("geth")]),
        _vm._v(" instance, specifically a light client started with "),
        _c("code", [
          _vm._v("geth --syncmode light --rpc --rpcapi eth,web3,debug,net")
        ]),
        _vm._v(
          "; Infura works too, but beware of latency and rate limiting). To start the fork, run "
        ),
        _c("code", [_vm._v("npm run ganache")]),
        _vm._v(". "),
        _c("em", [
          _vm._v(
            "If you would like to change the port, make sure to configure "
          ),
          _c("code", [_vm._v("scripts/ganache.js")]),
          _vm._v(", "),
          _c("code", [_vm._v("scripts/test.sh")]),
          _vm._v(", and the "),
          _c("code", [_vm._v("development")]),
          _vm._v(" network in "),
          _c("code", [_vm._v("truffle-config.js")]),
          _vm._v(".")
        ]),
        _vm._v(
          " Note that you will likely have to regularly restart your fork, especially when forking from a node without archive data or when using live 0x API responses to make currency exchanges."
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("To deploy the contracts to your private mainnet fork: "),
        _c("code", [
          _vm._v("truffle migrate --network development --skip-dry-run --reset")
        ])
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "To run automated tests on the contracts on your private mainnet fork, run "
        ),
        _c("code", [_vm._v("npm test")]),
        _vm._v(" (which runs "),
        _c("code", [_vm._v("npm run ganache")]),
        _vm._v(" in the background for you). If you are upgrading from "),
        _c("code", [_vm._v("v2.4.0")]),
        _vm._v(" or "),
        _c("code", [_vm._v("v2.4.1")]),
        _vm._v(", you must also set the following variables in "),
        _c("code", [_vm._v(".env")]),
        _vm._v(":")
      ]),
      _vm._v(" "),
      _c("div", { staticClass: "language- extra-class" }, [
        _c("pre", { pre: true, attrs: { class: "language-text" } }, [
          _c("code", [
            _vm._v(
              "UPGRADE_FUND_TOKEN_ADDRESS=0x016bf078ABcaCB987f0589a6d3BEAdD4316922B0\nUPGRADE_FUND_PRICE_CONSUMER_ADDRESS=0xFE98A52bCAcC86432E7aa76376751DcFAB202244\nUPGRADE_FUND_PROXY_ADDRESS=0xe4deE94233dd4d7c2504744eE6d34f3875b3B439\n"
            )
          ])
        ])
      ]),
      _c("p", [
        _vm._v("If you'd like to test gasless deposits via "),
        _c("code", [_vm._v("RariFundProxy.deposit")]),
        _vm._v(" via the Gas Station Network:")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Download "),
          _c("code", [
            _vm._v(
              "https://github.com/OpenZeppelin/openzeppelin-gsn-provider/blob/master/bin/gsn-relay"
            )
          ]),
          _vm._v(" to "),
          _c("code", [_vm._v("bin/gsn-relay")]),
          _vm._v(" and set permissions with "),
          _c("code", [_vm._v("chmod +x bin/gsn-relay")]),
          _vm._v(".")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Making sure "),
          _c("code", [_vm._v("npx")]),
          _vm._v(" is installed, run "),
          _c("code", [_vm._v("npm dev-gsn")]),
          _vm._v(".")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fund "),
          _c("code", [_vm._v("RariFundProxy")]),
          _vm._v(" using "),
          _c("code", [
            _vm._v(
              "npx @openzeppelin/gsn-helpers fund-recipient --recipient $RARI_FUND_PROXY_ADDRESS -n http://localhost:8546 -f $FROM_ADDRESS"
            )
          ]),
          _vm._v(" or "),
          _c(
            "a",
            {
              attrs: {
                href: "https://www.opengsn.org/recipients",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_vm._v("this tool"), _c("OutboundLink")],
            1
          ),
          _vm._v(" (or manually send ETH to "),
          _c("code", [
            _vm._v(
              "RelayHub(0xD216153c06E857cD7f72665E0aF1d7D82172F494).depositFor(address target)"
            )
          ]),
          _vm._v(").")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Run "),
          _c("code", [_vm._v("rari-gsn-signer")]),
          _vm._v(" with "),
          _c("code", [_vm._v("pm2 start ecosystem.config.js")]),
          _vm._v(" after configuring "),
          _c("code", [_vm._v("ecosystem.config.js")]),
          _vm._v(".")
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "live-deployment" } }, [
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#live-deployment" } },
          [_vm._v("#")]
        ),
        _vm._v(" Live Deployment")
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("In "),
        _c("code", [_vm._v(".env")]),
        _vm._v(", configure "),
        _c("code", [_vm._v("LIVE_DEPLOYER_ADDRESS")]),
        _vm._v(", "),
        _c("code", [_vm._v("LIVE_DEPLOYER_PRIVATE_KEY")]),
        _vm._v(", "),
        _c("code", [_vm._v("LIVE_WEB3_PROVIDER_URL")]),
        _vm._v(", "),
        _c("code", [_vm._v("LIVE_GAS_PRICE")]),
        _vm._v(' (ideally, use the "fast" price listed by '),
        _c(
          "a",
          {
            attrs: {
              href: "https://www.ethgasstation.info/",
              target: "_blank",
              rel: "noopener noreferrer"
            }
          },
          [_vm._v("ETH Gas Station"), _c("OutboundLink")],
          1
        ),
        _vm._v("), "),
        _c("code", [_vm._v("LIVE_FUND_OWNER")]),
        _vm._v(", "),
        _c("code", [_vm._v("LIVE_FUND_REBALANCER")]),
        _vm._v(", "),
        _c("code", [_vm._v("LIVE_FUND_INTEREST_FEE_MASTER_BENEFICIARY")]),
        _vm._v(", "),
        _c("code", [_vm._v("LIVE_FUND_WITHDRAWAL_FEE_MASTER_BENEFICIARY")]),
        _vm._v(", and "),
        _c("code", [_vm._v("LIVE_FUND_GSN_TRUSTED_SIGNER")]),
        _vm._v(" to deploy to the mainnet.")
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("If you are upgrading from "),
        _c("code", [_vm._v("v2.4.0")]),
        _vm._v(" or "),
        _c("code", [_vm._v("v2.4.1")]),
        _vm._v(", set "),
        _c("code", [_vm._v("UPGRADE_FROM_LAST_VERSION=1")]),
        _vm._v(" to enable upgrading and configure the following:")
      ]),
      _vm._v(" "),
      _c("div", { staticClass: "language- extra-class" }, [
        _c("pre", { pre: true, attrs: { class: "language-text" } }, [
          _c("code", [
            _vm._v(
              "UPGRADE_OLD_FUND_CONTROLLER=0xEe7162bB5191E8EC803F7635dE9A920159F1F40C\nUPGRADE_FUND_MANAGER_ADDRESS=0xC6BF8C8A55f77686720E0a88e2Fd1fEEF58ddf4a\nUPGRADE_FUND_OWNER_ADDRESS=0x10dB6Bce3F2AE1589ec91A872213DAE59697967a\n"
            )
          ])
        ])
      ]),
      _c("p", [
        _vm._v("You must also set "),
        _c("code", [_vm._v("LIVE_UPGRADE_FUND_OWNER_PRIVATE_KEY")]),
        _vm._v(" and "),
        _c("code", [_vm._v("LIVE_UPGRADE_TIMESTAMP_COMP_CLAIMED")]),
        _vm._v(
          " (set to current timestamp after claiming COMP awarded to the "
        ),
        _c("code", [_vm._v("RariFundController")]),
        _vm._v("; you should run migrations within 1 hour of this timestamp).")
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("Then, migrate: "),
        _c("code", [_vm._v("truffle migrate --network live")])
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("If you'd like to provide gasless deposits via "),
        _c("code", [_vm._v("RariFundProxy.deposit")]),
        _vm._v(" via the Gas Station Network:")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Fund "),
          _c("code", [_vm._v("RariFundProxy")]),
          _vm._v(" using "),
          _c("code", [
            _vm._v(
              "npx @openzeppelin/gsn-helpers fund-recipient --recipient $RARI_FUND_PROXY_ADDRESS -n $ETHEREUM_NODE_URL -f $FROM_ADDRESS"
            )
          ]),
          _vm._v(" or "),
          _c(
            "a",
            {
              attrs: {
                href: "https://www.opengsn.org/recipients",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_vm._v("this tool"), _c("OutboundLink")],
            1
          ),
          _vm._v(" (or manually send ETH to "),
          _c("code", [
            _vm._v(
              "RelayHub(0xD216153c06E857cD7f72665E0aF1d7D82172F494).depositFor(address target)"
            )
          ]),
          _vm._v(").")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Run "),
          _c("code", [_vm._v("rari-gsn-signer")]),
          _vm._v(" with "),
          _c("code", [
            _vm._v("pm2 start ecosystem.config.js --env production")
          ]),
          _vm._v(" after configuring "),
          _c("code", [_vm._v("ecosystem.config.js")]),
          _vm._v(".")
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "license" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#license" } }, [
          _vm._v("#")
        ]),
        _vm._v(" License")
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("See "), _c("code", [_vm._v("LICENSE")]), _vm._v(".")])
    ]
  )
}
var staticRenderFns = []
render._withStripped = true

export { render, staticRenderFns }"}]}